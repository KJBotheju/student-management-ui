version: '3.8'

services:
  # Frontend React Application
  frontend:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    ports:
      - "80:80"
    environment:
      - NODE_ENV=production
      - REACT_APP_API_BASE_URL=http://localhost:8080/api
    networks:
      - university-network
    restart: unless-stopped
    depends_on:
      - backend

  # Backend Spring Boot Application (example configuration)
  backend:
    # Replace with your actual backend image or build configuration
    image: openjdk:17-jdk-alpine
    # build:
    #   context: ../backend
    #   dockerfile: Dockerfile
    ports:
      - "8080:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - DATABASE_URL=jdbc:postgresql://database:5432/university_db
      - DATABASE_USERNAME=university_user
      - DATABASE_PASSWORD=university_pass
      - JWT_SECRET=your-jwt-secret-key-change-in-production
    networks:
      - university-network
    restart: unless-stopped
    depends_on:
      database:
        condition: service_healthy

  # PostgreSQL Database
  database:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=university_db
      - POSTGRES_USER=university_user
      - POSTGRES_PASSWORD=university_pass
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init:/docker-entrypoint-initdb.d
    networks:
      - university-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U university_user -d university_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching (optional)
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - university-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

networks:
  university-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
